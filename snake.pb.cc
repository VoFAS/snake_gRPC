// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/snake.proto
// Protobuf C++ Version: 5.29.3

#include "proto/snake.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace snake {

inline constexpr GameState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : map_{},
        score_{0},
        done_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameState::GameState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameStateDefaultTypeInternal() {}
  union {
    GameState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameStateDefaultTypeInternal _GameState_default_instance_;

inline constexpr GameAction::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : action_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameAction::GameAction(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameActionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameActionDefaultTypeInternal() {}
  union {
    GameAction _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameActionDefaultTypeInternal _GameAction_default_instance_;
}  // namespace snake
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_proto_2fsnake_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_proto_2fsnake_2eproto = nullptr;
const ::uint32_t
    TableStruct_proto_2fsnake_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::snake::GameState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::snake::GameState, _impl_.map_),
        PROTOBUF_FIELD_OFFSET(::snake::GameState, _impl_.score_),
        PROTOBUF_FIELD_OFFSET(::snake::GameState, _impl_.done_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::snake::GameAction, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::snake::GameAction, _impl_.action_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::snake::GameState)},
        {11, -1, -1, sizeof(::snake::GameAction)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::snake::_GameState_default_instance_._instance,
    &::snake::_GameAction_default_instance_._instance,
};
const char descriptor_table_protodef_proto_2fsnake_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\021proto/snake.proto\022\005snake\"5\n\tGameState\022"
    "\013\n\003map\030\001 \003(\t\022\r\n\005score\030\002 \001(\005\022\014\n\004done\030\003 \001("
    "\010\"\034\n\nGameAction\022\016\n\006action\030\001 \001(\t2=\n\tSnake"
    "Game\0220\n\tSendState\022\021.snake.GameAction\032\020.s"
    "nake.GameStateb\006proto3"
};
static ::absl::once_flag descriptor_table_proto_2fsnake_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_proto_2fsnake_2eproto = {
    false,
    false,
    182,
    descriptor_table_protodef_proto_2fsnake_2eproto,
    "proto/snake.proto",
    &descriptor_table_proto_2fsnake_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_proto_2fsnake_2eproto::offsets,
    file_level_enum_descriptors_proto_2fsnake_2eproto,
    file_level_service_descriptors_proto_2fsnake_2eproto,
};
namespace snake {
// ===================================================================

class GameState::_Internal {
 public:
};

GameState::GameState(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:snake.GameState)
}
inline PROTOBUF_NDEBUG_INLINE GameState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::snake::GameState& from_msg)
      : map_{visibility, arena, from.map_},
        _cached_size_{0} {}

GameState::GameState(
    ::google::protobuf::Arena* arena,
    const GameState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, score_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, score_),
           offsetof(Impl_, done_) -
               offsetof(Impl_, score_) +
               sizeof(Impl_::done_));

  // @@protoc_insertion_point(copy_constructor:snake.GameState)
}
inline PROTOBUF_NDEBUG_INLINE GameState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : map_{visibility, arena},
        _cached_size_{0} {}

inline void GameState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, score_),
           0,
           offsetof(Impl_, done_) -
               offsetof(Impl_, score_) +
               sizeof(Impl_::done_));
}
GameState::~GameState() {
  // @@protoc_insertion_point(destructor:snake.GameState)
  SharedDtor(*this);
}
inline void GameState::SharedDtor(MessageLite& self) {
  GameState& this_ = static_cast<GameState&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* GameState::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GameState(arena);
}
constexpr auto GameState::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GameState, _impl_.map_) +
          decltype(GameState::_impl_.map_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(GameState), alignof(GameState), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GameState::PlacementNew_,
                                 sizeof(GameState),
                                 alignof(GameState));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GameState::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GameState_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GameState::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GameState>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GameState::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GameState>(), &GameState::ByteSizeLong,
            &GameState::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GameState, _impl_._cached_size_),
        false,
    },
    &GameState::kDescriptorMethods,
    &descriptor_table_proto_2fsnake_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GameState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 27, 2> GameState::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::snake::GameState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated string map = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GameState, _impl_.map_)}},
    // int32 score = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameState, _impl_.score_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GameState, _impl_.score_)}},
    // bool done = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GameState, _impl_.done_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GameState, _impl_.done_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string map = 1;
    {PROTOBUF_FIELD_OFFSET(GameState, _impl_.map_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // int32 score = 2;
    {PROTOBUF_FIELD_OFFSET(GameState, _impl_.score_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool done = 3;
    {PROTOBUF_FIELD_OFFSET(GameState, _impl_.done_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\17\3\0\0\0\0\0\0"
    "snake.GameState"
    "map"
  }},
};

PROTOBUF_NOINLINE void GameState::Clear() {
// @@protoc_insertion_point(message_clear_start:snake.GameState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_.Clear();
  ::memset(&_impl_.score_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.done_) -
      reinterpret_cast<char*>(&_impl_.score_)) + sizeof(_impl_.done_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameState::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameState& this_ = static_cast<const GameState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameState::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:snake.GameState)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated string map = 1;
          for (int i = 0, n = this_._internal_map_size(); i < n; ++i) {
            const auto& s = this_._internal_map().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "snake.GameState.map");
            target = stream->WriteString(1, s, target);
          }

          // int32 score = 2;
          if (this_._internal_score() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_score(), target);
          }

          // bool done = 3;
          if (this_._internal_done() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_done(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:snake.GameState)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameState::ByteSizeLong(const MessageLite& base) {
          const GameState& this_ = static_cast<const GameState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameState::ByteSizeLong() const {
          const GameState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:snake.GameState)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string map = 1;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map().size());
              for (int i = 0, n = this_._internal_map().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_map().Get(i));
              }
            }
          }
           {
            // int32 score = 2;
            if (this_._internal_score() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_score());
            }
            // bool done = 3;
            if (this_._internal_done() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameState*>(&to_msg);
  auto& from = static_cast<const GameState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snake.GameState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_map()->MergeFrom(from._internal_map());
  if (from._internal_score() != 0) {
    _this->_impl_.score_ = from._impl_.score_;
  }
  if (from._internal_done() != 0) {
    _this->_impl_.done_ = from._impl_.done_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameState::CopyFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snake.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GameState::InternalSwap(GameState* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.map_.InternalSwap(&other->_impl_.map_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameState, _impl_.done_)
      + sizeof(GameState::_impl_.done_)
      - PROTOBUF_FIELD_OFFSET(GameState, _impl_.score_)>(
          reinterpret_cast<char*>(&_impl_.score_),
          reinterpret_cast<char*>(&other->_impl_.score_));
}

::google::protobuf::Metadata GameState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameAction::_Internal {
 public:
};

GameAction::GameAction(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:snake.GameAction)
}
inline PROTOBUF_NDEBUG_INLINE GameAction::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::snake::GameAction& from_msg)
      : action_(arena, from.action_),
        _cached_size_{0} {}

GameAction::GameAction(
    ::google::protobuf::Arena* arena,
    const GameAction& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameAction* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:snake.GameAction)
}
inline PROTOBUF_NDEBUG_INLINE GameAction::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : action_(arena),
        _cached_size_{0} {}

inline void GameAction::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GameAction::~GameAction() {
  // @@protoc_insertion_point(destructor:snake.GameAction)
  SharedDtor(*this);
}
inline void GameAction::SharedDtor(MessageLite& self) {
  GameAction& this_ = static_cast<GameAction&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.action_.Destroy();
  this_._impl_.~Impl_();
}

inline void* GameAction::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GameAction(arena);
}
constexpr auto GameAction::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GameAction),
                                            alignof(GameAction));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GameAction::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GameAction_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GameAction::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GameAction>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GameAction::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GameAction>(), &GameAction::ByteSizeLong,
            &GameAction::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GameAction, _impl_._cached_size_),
        false,
    },
    &GameAction::kDescriptorMethods,
    &descriptor_table_proto_2fsnake_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GameAction::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 31, 2> GameAction::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::snake::GameAction>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string action = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GameAction, _impl_.action_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string action = 1;
    {PROTOBUF_FIELD_OFFSET(GameAction, _impl_.action_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\20\6\0\0\0\0\0\0"
    "snake.GameAction"
    "action"
  }},
};

PROTOBUF_NOINLINE void GameAction::Clear() {
// @@protoc_insertion_point(message_clear_start:snake.GameAction)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.action_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameAction::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameAction& this_ = static_cast<const GameAction&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameAction::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameAction& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:snake.GameAction)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string action = 1;
          if (!this_._internal_action().empty()) {
            const std::string& _s = this_._internal_action();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "snake.GameAction.action");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:snake.GameAction)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameAction::ByteSizeLong(const MessageLite& base) {
          const GameAction& this_ = static_cast<const GameAction&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameAction::ByteSizeLong() const {
          const GameAction& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:snake.GameAction)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string action = 1;
            if (!this_._internal_action().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_action());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameAction::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameAction*>(&to_msg);
  auto& from = static_cast<const GameAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snake.GameAction)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameAction::CopyFrom(const GameAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snake.GameAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GameAction::InternalSwap(GameAction* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.action_, &other->_impl_.action_, arena);
}

::google::protobuf::Metadata GameAction::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace snake
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_proto_2fsnake_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
