// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/snake.proto
// Protobuf C++ Version: 5.29.3

#ifndef proto_2fsnake_2eproto_2epb_2eh
#define proto_2fsnake_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2fsnake_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fsnake_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_proto_2fsnake_2eproto;
namespace snake {
class GameAction;
struct GameActionDefaultTypeInternal;
extern GameActionDefaultTypeInternal _GameAction_default_instance_;
class GameState;
struct GameStateDefaultTypeInternal;
extern GameStateDefaultTypeInternal _GameState_default_instance_;
}  // namespace snake
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace snake {

// ===================================================================


// -------------------------------------------------------------------

class GameState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:snake.GameState) */ {
 public:
  inline GameState() : GameState(nullptr) {}
  ~GameState() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GameState* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GameState));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameState(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameState(const GameState& from) : GameState(nullptr, from) {}
  inline GameState(GameState&& from) noexcept
      : GameState(nullptr, std::move(from)) {}
  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameState& operator=(GameState&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameState* internal_default_instance() {
    return reinterpret_cast<const GameState*>(
        &_GameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(GameState& a, GameState& b) { a.Swap(&b); }
  inline void Swap(GameState* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameState* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GameState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameState& from) { GameState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GameState* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "snake.GameState"; }

 protected:
  explicit GameState(::google::protobuf::Arena* arena);
  GameState(::google::protobuf::Arena* arena, const GameState& from);
  GameState(::google::protobuf::Arena* arena, GameState&& from) noexcept
      : GameState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMapFieldNumber = 1,
    kScoreFieldNumber = 2,
    kDoneFieldNumber = 3,
  };
  // repeated string map = 1;
  int map_size() const;
  private:
  int _internal_map_size() const;

  public:
  void clear_map() ;
  const std::string& map(int index) const;
  std::string* mutable_map(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_map(int index, Arg_&& value, Args_... args);
  std::string* add_map();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_map(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& map() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_map();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_map() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_map();

  public:
  // int32 score = 2;
  void clear_score() ;
  ::int32_t score() const;
  void set_score(::int32_t value);

  private:
  ::int32_t _internal_score() const;
  void _internal_set_score(::int32_t value);

  public:
  // bool done = 3;
  void clear_done() ;
  bool done() const;
  void set_done(bool value);

  private:
  bool _internal_done() const;
  void _internal_set_done(bool value);

  public:
  // @@protoc_insertion_point(class_scope:snake.GameState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      27, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameState& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> map_;
    ::int32_t score_;
    bool done_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fsnake_2eproto;
};
// -------------------------------------------------------------------

class GameAction final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:snake.GameAction) */ {
 public:
  inline GameAction() : GameAction(nullptr) {}
  ~GameAction() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GameAction* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GameAction));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameAction(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameAction(const GameAction& from) : GameAction(nullptr, from) {}
  inline GameAction(GameAction&& from) noexcept
      : GameAction(nullptr, std::move(from)) {}
  inline GameAction& operator=(const GameAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameAction& operator=(GameAction&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameAction* internal_default_instance() {
    return reinterpret_cast<const GameAction*>(
        &_GameAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(GameAction& a, GameAction& b) { a.Swap(&b); }
  inline void Swap(GameAction* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameAction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameAction* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GameAction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameAction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameAction& from) { GameAction::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GameAction* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "snake.GameAction"; }

 protected:
  explicit GameAction(::google::protobuf::Arena* arena);
  GameAction(::google::protobuf::Arena* arena, const GameAction& from);
  GameAction(::google::protobuf::Arena* arena, GameAction&& from) noexcept
      : GameAction(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kActionFieldNumber = 1,
  };
  // string action = 1;
  void clear_action() ;
  const std::string& action() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action(Arg_&& arg, Args_... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* value);

  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(
      const std::string& value);
  std::string* _internal_mutable_action();

  public:
  // @@protoc_insertion_point(class_scope:snake.GameAction)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      31, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameAction& from_msg);
    ::google::protobuf::internal::ArenaStringPtr action_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fsnake_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GameState

// repeated string map = 1;
inline int GameState::_internal_map_size() const {
  return _internal_map().size();
}
inline int GameState::map_size() const {
  return _internal_map_size();
}
inline void GameState::clear_map() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.map_.Clear();
}
inline std::string* GameState::add_map() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_map()->Add();
  // @@protoc_insertion_point(field_add_mutable:snake.GameState.map)
  return _s;
}
inline const std::string& GameState::map(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:snake.GameState.map)
  return _internal_map().Get(index);
}
inline std::string* GameState::mutable_map(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:snake.GameState.map)
  return _internal_mutable_map()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void GameState::set_map(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_map()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:snake.GameState.map)
}
template <typename Arg_, typename... Args_>
inline void GameState::add_map(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_map(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:snake.GameState.map)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GameState::map() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:snake.GameState.map)
  return _internal_map();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GameState::mutable_map() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:snake.GameState.map)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_map();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GameState::_internal_map() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.map_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GameState::_internal_mutable_map() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.map_;
}

// int32 score = 2;
inline void GameState::clear_score() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_ = 0;
}
inline ::int32_t GameState::score() const {
  // @@protoc_insertion_point(field_get:snake.GameState.score)
  return _internal_score();
}
inline void GameState::set_score(::int32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:snake.GameState.score)
}
inline ::int32_t GameState::_internal_score() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.score_;
}
inline void GameState::_internal_set_score(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_ = value;
}

// bool done = 3;
inline void GameState::clear_done() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.done_ = false;
}
inline bool GameState::done() const {
  // @@protoc_insertion_point(field_get:snake.GameState.done)
  return _internal_done();
}
inline void GameState::set_done(bool value) {
  _internal_set_done(value);
  // @@protoc_insertion_point(field_set:snake.GameState.done)
}
inline bool GameState::_internal_done() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.done_;
}
inline void GameState::_internal_set_done(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.done_ = value;
}

// -------------------------------------------------------------------

// GameAction

// string action = 1;
inline void GameAction::clear_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GameAction::action() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:snake.GameAction.action)
  return _internal_action();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GameAction::set_action(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:snake.GameAction.action)
}
inline std::string* GameAction::mutable_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:snake.GameAction.action)
  return _s;
}
inline const std::string& GameAction::_internal_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_.Get();
}
inline void GameAction::_internal_set_action(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(value, GetArena());
}
inline std::string* GameAction::_internal_mutable_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_.Mutable( GetArena());
}
inline std::string* GameAction::release_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:snake.GameAction.action)
  return _impl_.action_.Release();
}
inline void GameAction::set_allocated_action(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:snake.GameAction.action)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace snake


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // proto_2fsnake_2eproto_2epb_2eh
